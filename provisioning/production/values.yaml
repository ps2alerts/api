common:
  name: ps2alerts-api-production
  hostname: api.ps2alerts.com
  backendTarget: ps2alerts-api-production-rest # Points to deployment index 1

application:
  version: {{ version }}
  port: 3000

ingress:
  enabled: true

service:
  enabled: true
  prometheusMonitoring: true

deployments:
  one:
    index: "rest"
    enabled: true
    containerImage: "maelstromeous/ps2alerts:ps2alerts-api-production-{{ version }}"
    resources:
      cpu:
        limits: 500m
        requests: 150m
      mem:
        limits: 256Mi
        requests: 128Mi
    probes:
      startupProbe:
        enabled: true
        type: httpGet
        httpGetPath: /healthcheck
        initialDelaySeconds: 15
      readinessProbe:
        enabled: true
        type: httpGet
        httpGetPath: /healthcheck
        initialDelaySeconds: 30
      livenessProbe:
        enabled: true
        type: httpGet
        httpGetPath: /healthcheck
        initialDelaySeconds: 30
    env:
      - name: NODE_ENV
        value: "production"
      - name: VERSION
        value: "{{ version }}"
      - name: DB_USER
        value: "${{ secrets.DB_USER }}"
      - name: DB_PASS
        value: "${{ secrets.DB_PASS_NEW }}"
      - name: DB_HOST
        value: "ps2alerts-db"
      - name: DB_PORT
        value: '"27017"'
      - name: DB_NAME
        value: "ps2alerts"
      - name: DB_DEBUG
        value: '"false"'
      - name: DB_POOL_SIZE
        value: '"25"'
      - name: RABBITMQ_HOST
        value: "ps2alerts-rabbitmq"
      - name: RABBITMQ_USER
        value: "ps2alerts"
      - name: RABBITMQ_PASS
        value: "${{ secrets.RABBITMQ_PS2ALERTS_PASS }}"
      - name: RABBITMQ_VHOST
        value: "/ps2alerts"
      - name: RABBITMQ_QUEUE
        value: "api-queue-production"
      - name: RABBITMQ_PREFETCH
        value: '"1000"'
      - name: REDIS_HOST
        value: "ps2alerts-redis-master"
      - name: REDIS_PASS
        value: "${{ secrets.REDIS_PASS }}"
      - name: REDIS_DB
        value: '"10"'
      - name: AGGREGATOR_ENABLED
        value: '"false"'
      - name: CRON_ENABLED
        value: '"false"'
      - name: REST_ENABLED
        value: '"true"'
      - name: INTERNAL_API_USER
        value: "${{ secrets.INTERNAL_API_USER }}"
      - name: INTERNAL_API_PASS
        value: "${{ secrets.INTERNAL_API_PASS }}"
    scaling:
      enabled: true
      min: 5
      max: 10
      targetCpu: 50
  two:
    index: "aggregator"
    enabled: true
    containerImage: "maelstromeous/ps2alerts:ps2alerts-api-production-{{ version }}"
    resources:
      cpu:
        limits: 300m
        requests: 100m
      mem:
        limits: 256Mi
        requests: 128Mi
    probes:
      startupProbe:
        enabled: true
        type: httpGet
        httpGetPath: /healthcheck
        initialDelaySeconds: 15
      readinessProbe:
        enabled: true
        type: httpGet
        httpGetPath: /healthcheck
        initialDelaySeconds: 30
      livenessProbe:
        enabled: true
        type: httpGet
        httpGetPath: /healthcheck
        initialDelaySeconds: 30
    env:
      - name: NODE_ENV
        value: "production"
      - name: VERSION
        value: "{{ version }}"
      - name: DB_USER
        value: "${{ secrets.DB_USER }}"
      - name: DB_PASS
        value: "${{ secrets.DB_PASS_NEW }}"
      - name: DB_HOST
        value: "ps2alerts-db"
      - name: DB_PORT
        value: '"27017"'
      - name: DB_NAME
        value: "ps2alerts"
      - name: DB_DEBUG
        value: '"false"'
      - name: DB_POOL_SIZE
        value: '"50"'
      - name: RABBITMQ_HOST
        value: "ps2alerts-rabbitmq"
      - name: RABBITMQ_USER
        value: "ps2alerts"
      - name: RABBITMQ_PASS
        value: "${{ secrets.RABBITMQ_PS2ALERTS_PASS }}"
      - name: RABBITMQ_VHOST
        value: "/ps2alerts"
      - name: RABBITMQ_QUEUE
        value: "api-queue-production"
      - name: RABBITMQ_PREFETCH
        value: '"500"'
      - name: REDIS_HOST
        value: "ps2alerts-redis-master"
      - name: REDIS_PASS
        value: "${{ secrets.REDIS_PASS }}"
      - name: REDIS_DB
        value: '"10"'
      - name: AGGREGATOR_ENABLED
        value: '"true"'
      - name: CRON_ENABLED
        value: '"false"'
      - name: REST_ENABLED
        value: '"false"'
      - name: INTERNAL_API_USER
        value: "${{ secrets.INTERNAL_API_USER }}"
      - name: INTERNAL_API_PASS
        value: "${{ secrets.INTERNAL_API_PASS }}"
    scaling:
      enabled: true
      min: 5
      max: 10
      targetCpu: 75
  three:
    index: "cron"
    enabled: true
    containerImage: "maelstromeous/ps2alerts:ps2alerts-api-production-{{ version }}"
    resources:
      cpu:
        limits: 300m
        requests: 100m
      mem:
        limits: 128Mi
        requests: 64Mi
    probes:
      startupProbe:
        enabled: true
        type: httpGet
        httpGetPath: /healthcheck
        initialDelaySeconds: 15
      readinessProbe:
        enabled: true
        type: httpGet
        httpGetPath: /healthcheck
        initialDelaySeconds: 30
      livenessProbe:
        enabled: true
        type: httpGet
        httpGetPath: /healthcheck
        initialDelaySeconds: 30
    env:
      - name: NODE_ENV
        value: "production"
      - name: VERSION
        value: "{{ version }}"
      - name: DB_USER
        value: "${{ secrets.DB_USER }}"
      - name: DB_PASS
        value: "${{ secrets.DB_PASS_NEW }}"
      - name: DB_HOST
        value: "ps2alerts-db"
      - name: DB_PORT
        value: '"27017"'
      - name: DB_NAME
        value: "ps2alerts"
      - name: DB_DEBUG
        value: '"false"'
      - name: DB_POOL_SIZE
        value: '"25"'
      - name: RABBITMQ_HOST
        value: "ps2alerts-rabbitmq"
      - name: RABBITMQ_USER
        value: "ps2alerts"
      - name: RABBITMQ_PASS
        value: "${{ secrets.RABBITMQ_PS2ALERTS_PASS }}"
      - name: RABBITMQ_VHOST
        value: "/ps2alerts"
      - name: RABBITMQ_QUEUE
        value: "api-queue-production"
      - name: RABBITMQ_PREFETCH
        value: '"1000"'
      - name: REDIS_HOST
        value: "ps2alerts-redis-master"
      - name: REDIS_PASS
        value: "${{ secrets.REDIS_PASS }}"
      - name: REDIS_DB
        value: '"10"'
      - name: AGGREGATOR_ENABLED
        value: '"false"'
      - name: CRON_ENABLED
        value: '"true"'
      - name: REST_ENABLED
        value: '"false"'
      - name: INTERNAL_API_USER
        value: "${{ secrets.INTERNAL_API_USER }}"
      - name: INTERNAL_API_PASS
        value: "${{ secrets.INTERNAL_API_PASS }}"
    nodeSelector:
      nodepool: perm-pool
    scaling:
      enabled: false

